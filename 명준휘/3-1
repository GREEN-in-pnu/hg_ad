# 데이터 정제(전처리)

수정하는 것도 중요하지만,  
**수정한 기록을 저장하는 것**도 중요함.  
→ 새로운 데이터가 들어왔을 때 전처리 방식이 달라질 수 있으며,  
   이로 인해 **분석 결과에 영향을 줄 수 있기 때문!**

**by. pandas**

---

## 🔹 열 삭제하기

### 방법 1 — 슬라이싱 사용
```python
데이터_df.loc[:, '필요한 열1':'필요한 열2']
```

### 방법 2 — 불리안 배열로 필터링
```python
selected_c = 데이터_df.columns != '제거하고 싶은 열'
데이터_df.loc[:, selected_c]
```

### 방법 3 — drop() 메서드 사용
```python
데이터.drop('제거하고 싶은 열', axis=1)  # axis=1은 열 삭제
```

### 방법 4 — dropna()로 non값이 포함된 열 삭제
```python
non값이 하나라도 있으면 삭제
데이터.dropna(axis=1)
모든 값이 non일 때만 삭제
데이터.dropna(axis=1, how='all')
```

## 🔹 행 삭제하기

### 방법 1 — drop() 메서드로 인덱스 지정
```python
데이터.drop([0, 1])  # 0번, 1번 행 삭제
```

### 방법 2 — 불리언 배열 활용
```python
selected_r = 데이터['뽑고싶은 값이 속한 열'] == '뽑고싶은 값'
데이터[selected_r]

또는 대소 비교:
데이터[데이터['비교하고 싶은 열'] > 값]
```

## 🔹 중복된 행 찾기 — duplicated()

처음 항목은 False, 그 이후 중복된 행은 True 반환

keep=False 옵션을 사용하면 모든 중복을 True로 표시

```python
dup_r = 데이터.duplicated(subset=['중복 기준 열1', '열2'], keep=False)
데이터[dup_r]
```

## 🔹 그룹별로 모으기 — groupby()

그룹별로 데이터를 묶고, 다른 열에 대해 연산 수행 (ex. 평균, 합계 등)

```python
데이터.groupby(by=['기준 열'], dropna=False).sum()
```
